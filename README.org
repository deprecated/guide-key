* Overview
Emacs を利用する場合の大きな障壁の1つにキーバインドの覚えにくさがあるでしょう．
1ストロークのキーバインドは頻繁に使いますし，まだ覚えやすいですが，2ストローク
以上のキーは頻繁に使うものしか覚えていない，という人も多いのではないでしょうか．
ましてや新しく導入した外部ライブラリのキーバインドなどは覚えるのが億劫になりま
す．Emacs には標準で `describe-key' や `describe-bindings' などキーバインドを
調べる機能もありますが，必ずしも使いやすくありませんし，能動的にコマンドを実行
しないといけません．

この問題を解決する外部ライブラリとして有名なのが [[http://emacswiki.org/emacs/one-key.el][one-key.el]] です．このライブラ
リを使えば，プレフィックスキーを押した際に，そのプレフィックスに続くキーを自動
的に（別ウィンドウに）表示してくれます．下図は C-x r を押した場合．

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-one-key-example.png]]

しかし one-key.el にもいくつか問題があります．
- プレフィックスに続くキー（テンプレート）を自分で記述しないといけないません．
  主要なプレフィックスキーのテンプレートはあらかじめ用意してありますが，自分で
  書く場合は手間がかかります．その手間を軽減してくれるジェネレータを
  rubikitch さんが[[http://d.hatena.ne.jp/rubikitch/20090127/onekey][こちら]]で書いてくれていますが，やはりめんどくさい．
- キーマップのキーバインドを変更した場合，テンプレートの方も手動で変更しなけれ
  ばなりません．テンプレートが自動的にキーマップに追随してくれたらいいのに．
- one-key.el はプレフィックスキーに割り当ててあるコマンドを置き換えます．つま
  りデフォルトでは C-x r に割り当てられている ctl-x-r-prefix を上書きしてしま
  うのでいろいろ問題が出てきます．例えば `describe-key' で C-x r t に割り当て
  られているコマンドを調べようとすると，C-x r に割り当てられている one-key の
  コマンドが先に出てきてしまい，直接 C-x r t を調べることができなくなってしま
  います．

以上の問題点を解決した guide-key.el というのを作ってみました．キーマップに自
動的に追随してくれますし，コマンドを上書きするようなこともありません．
* Installation
[[http://melpa.milkbox.net/][MELPA]] に登録しているので，package.el を使ってインストールできます．Emacs24 の
人や package.el を自分で入れている人は init.el に
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC
と設定すると，MELPA に登録されているライブラリ群を見ることができます．M-x
package-list-packages を実行してライブラリをリストアップし，i で guide-key を
選択，x で実行することにより guide-key がインストールされます．guide-key はウィ
ンドウの操作を全部 [[https://github.com/m2ym/popwin-el][popwin.el]] に任せているので，popwin がインストールされている
必要があります．package.el でインストールすれば自動的に popwin もインストール
されます．

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-package-install.png]]

package.el がない人は [[https://github.com/m2ym/popwin-el][m2ym/popwin-el]] と [[https://github.com/kbkbkbkb1/guide-key][kbkbkbkb1/guide-key]] から popwin.elと
guide-key.el を直接ダウンロードしてきて，適当に `load-path' が通っているところ
に保存してください．
* Usage
`guide-key/guide-key-sequence' にポップアップして欲しいキーシーケンスを登録し
ます．当然複数個登録できます．
#+BEGIN_SRC emacs-lisp
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
(guide-key-mode 1)  ; guide-key-mode を有効にする
#+END_SRC
init.el にこの設定をした後 C-x r を押すと以下のようになります．

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example.png]]
guide-key は特定の正規表現に当てはまるコマンド名に色をつけることができます．
C-x r には rectangle 系と register 系のコマンドがあります．いま rectangle 系の
コマンドに色をつけて目立たせたいとすると
#+BEGIN_SRC emacs-lisp
(setq guide-key/highlight-command-regexp "rectangle")
#+END_SRC
と設定しておけば，

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example2.png]]

このように rectangle 系のコマンドだけが色付けされます．これでコマンドを探しや
すくなりますし，キーバインドを覚えやすくなります．rectangle 系，register 系ど
ちらも色付けしたければ
#+BEGIN_SRC emacs-lisp
(setq guide-key/highlight-command-regexp "rectangle\\|register")
#+END_SRC
のように，適当に正規表現を設定してください．またプレフィックスキー（"prefix"
という正規表現に一致するコマンド）にも自動的に色付けがされます．

guide-key の基本的な動作は以上ですが，動作を制御する変数などを説明しておきま
す．
- *(guide-key-mode ARG)*: guide-key-mode はマイナーモードで実装されています．
  対話的に実行すればトグル動作になるので，一時的に有効無効を切り替える場合は
  M-x guide-key-mode を実行してください．グローバルマイナーモードなので，特定
  のバッファのみで有効にする，といったような動作はできません．全バッファ共通で
  有効か無効かのどちらかです．
- *guide-key/popup-window-position*: ポップアップするウィンドウの位置を制御す
  る変数です．right, bottom, left, top のいずれかを指定してください．デフォル
  トは right です．
- *guide-key/polling-time*: 入力されているキーシーケンスをポーリングする間隔を
  制御する変数です．デフォルトは0.1です（秒単位）．キーを押してすぐさまポップ
  アップされるのが嫌な場合は長くするといいでしょう．おそらく0.1でもほぼ一瞬で
  表示されるように感じると思います．0.01ぐらい短くしてもきちんと動作し，他の操
  作にも影響が無いことを確認していますが，0.1で大多数の人は問題ないと思います．

guide-key が動作することを確認している環境は以下のようになります．
- Emacs 24.2, Ubuntu 12.04 or Windows 7 64bit
- Emacs 23.3, Ubuntu 12.04 or Windows 7 64bit
- Emacs 22.3, Windows 7 64bit
とにかく popwin が動けば guide-key も動作するはずです．ターミナル環境の Emacs
でも問題なく動作します．
** 特定のモードで設定を追加
こういったキー入力を補助して欲しい場面は，おそらく新しく導入したモードに独自の
キーバインドがある場合でしょう．「さっきマニュアルを見たのに，もうキーバインド
を忘れた」ということが起きないように，以下では guide-key を使って特定のモード
に対して設定を追加します．

`guide-key/add-local-guide-key-sequence' と
`guide-key/add-local-highlight-command-regexp' を使うと現在のバッファの変数の
みを変更できます．これを特定のモードのフックと組み合わせれば，特定のモードに
対して設定を追加できます．

例えば org-mode を例にとって見ると，以下のような設定になります．
#+BEGIN_SRC emacs-lisp
(defun guide-key/my-hook-function-for-org-mode ()
  (guide-key/add-local-guide-key-sequence "C-c")
  (guide-key/add-local-guide-key-sequence "C-c C-x")
  (guide-key/add-local-guide-key-sequence "C-c C-v")
  (guide-key/add-local-highlight-command-regexp "org-"))
(add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
#+END_SRC
この設定をした後，org-mode のバッファで C-c C-x p を順番に押して
`org-set-property' が実行される様子がこれです．

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example-org-anime.gif]]

色付けするコマンドに "org-" を追加しているので，ほとんどのコマンドが色付けさ
れています．これだとあまり意味が無いので，覚えたいコマンド群のみが色付けされ
るような正規表現（例えば "org-clock-" など）に好みで変えてください．

メジャーモードでもマイナーモードでもフックさえあれば同様のことができるので，
お好きなモードで試してみてください．
* 内部動作                                                         :noexport:
#+check
- 要はポーリング．フックはないのかね？
- ウィンドウ操作には popwin
* まとめ
最後に guide-key の特徴をまとめておきます．
- 現在入力しているキーシケンスに続くキーを自動的にポップアップします．ポップアッ
  プさせたいプレフィックスを設定するだけで使えます．また動的にキーバインドを調
  べているので，キーバインドが変更されても自動的に追随できます．
- 特定のコマンドを色付けすることできます．いま注目している機能に関するコマンド
  だけを色付けすることにより，キーバインドを探しやすくなり体で覚えることがで
  きます．
- 既存のコマンドを上書きしないので，`describe-key' や `describe-bindings' な
  どに影響が出ません．

既知の問題点，欠点には以下のようなものがあります．
- guide-key は次に続くキーバインドをすべて表示しようとするので，ポップアップウィ
  ンドウのサイズが大きくなりがちです．もし現在のフレームの大きさよりポップアッ
  プウィンドウの方が大きくなると，正常にポップアップされなくなります．なのでキー
  バインドの多い "C-x" などをポップアップさせるのは，全くの初心者の人以外はあ
  まりお勧めしません．将来的には，ポップアップするコマンドの方を個数や正規表現
  で制限する機能を追加するかもしれません．
- またポップアップされるキーバインドが多すぎると，目視で目的のコマンドを探すこ
  とが難しくなります．ポップアップされるコマンドの個数，あるいは色付けされたコ
  マンドの個数が数個〜十数個ぐらいになるのが理想的かと思います．
- キーバインドをポップアップさせようとした時，一瞬ポップアップされて一瞬で閉じ
  てしまうことがあります．popwin で制御されているウィンドウ（デフォルトだと
  Help バッファや Apropos バッファなど）を閉じた直後に起こることが多いですが，
  他の場面でもたまにあります．そういうときは C-g を連打したり，他のコマンドを
  実行して仕切りなおしてからもう一回プレフィックスキーを入力してみてください．
- one-key ではコマンド名の代わりに，短い説明文字列を表示させることが出来ました．
  これは手動でテンプレートを作っているからこその利点です．guide-key では動的に
  キーバインドからコマンドを抽出してくるので，コマンド名しか表示させることが
  できません．

自分としてはキーバインドが変更されても追随するという事を最重要視して作りまし
た．guide-key を使えばもっとキーバインドを覚えやすくなると思いますので，みな
さんぜひ使ってみてください．

#+img/one-key-example.png http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-one-key-example.png
#+img/guide-key-example.png http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example.png
#+img/guide-key-example2.png http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example2.png
#+img/guide-key-package-install.png http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-package-install.png
#+img/guide-key-example-org-anime.gif http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example-org-anime.gif
