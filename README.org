* guide-key.el --- Guide the following key bindings automatically and dynamically
** Overview
guide-key.el enables to guide the following key bindings automatically and
dynamically. guide-key aims to be an alternative of [[http://emacswiki.org/emacs/one-key.el][one-key.el]].

Here are some features of this library.
- guide-key automatically pop up the keys following your favorite
  prefixes. Moreover, even if you change key bindings, guide-key follows its
  change dynamically.
- guide-key can highlight particular commands. This makes it easy to find a
  command you are looking for, and to learn its key binding.
- guide-key doesn't overwrite existing commands and key bindings. So, there
  is no bad effect on using `describe-key' and `describe-bindings'.
** Installation
I added guide-key to [[http://melpa.milkbox.net/][MELPA]]. You can install guide-key with package.el,

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-package-install.png]]

Because guide-key depends on [[https://github.com/m2ym/popwin-el][popwin.el]], popwin.el is also installed at a
time.

If you don't have package.el, please download popwin.el and guide-key.el
directly from [[https://github.com/m2ym/popwin-el][m2ym/popwin-el]] and [[https://github.com/kbkbkbkb1/guide-key][kbkbkbkb1/guide-key]], and then put them in
your `load-path'.
** Usage
You just add your favorite prefix keys to `guide-key/guide-key-sequence' as
below.
#+BEGIN_SRC emacs-lisp
(require 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
(guide-key-mode 1)  ; Enable guide-key-mode
#+END_SRC
When you press these prefix keys, key bindings are automatically popped up.
This is a screenshot when you press C-x r.

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example.png]]

guide-key can highlight commands which matches a certain regular expression.
Key bindings following C-x r are rectangle family and register family.
If you want to highlight only rectangle family commands, put this setting
in your init.el.
#+BEGIN_SRC emacs-lisp
(setq guide-key/highlight-command-regexp "rectangle")
#+END_SRC

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example2.png]]

This feature makes you to find commands and learn their key bindings. If
you want to highlight rectangle family and register family, set an
adequate regular expression like this.
#+BEGIN_SRC emacs-lisp
(setq guide-key/highlight-command-regexp "rectangle\\|register")
#+END_SRC
Moreover, prefix commands are automatically highlighted.

Here are some functions and variables which control guide-key.
- *(guide-key-mode ARG)*: guide-key-mode is implemented as a minor mode.
     Excuting M-x guide-key-mode toggles whether guide-key is enable or not.
     Because guide-key-mode is a global minor mode, guide-key-mode is enable
     in all buffers or disable in all buffers.
- *guide-key/popup-window-position*: This variable controls where a guide-key
     buffer is poppoed up. A value of this variable is one of ~right~, ~bottom~,
     ~left~, ~top~. The default value is ~right~.
- *guide-key/polling-time*: This variable controls a polling time. The
     default value is 0.1 (unit is second).

I've confirmed that guide-key works well in these environments.
- Emacs 24.2, Ubuntu 12.04 or Windows 7 64bit
- Emacs 23.3, Ubuntu 12.04 or Windows 7 64bit
- Emacs 22.3, Windows 7 64bit
If popwin works good, I think guide-key also works good. You can use
guide-key with Emacs working in terminal.
*** 特定のモードで設定を追加
こういったキー入力を補助して欲しい場面は，おそらく新しく導入したモードに独自の
キーバインドがある場合でしょう．「さっきマニュアルを見たのに，もうキーバインド
を忘れた」ということが起きないように，以下では guide-key を使って特定のモード
に対して設定を追加します．

`guide-key/add-local-guide-key-sequence' と
`guide-key/add-local-highlight-command-regexp' を使うと現在のバッファの変数の
みを変更できます．これを特定のモードのフックと組み合わせれば，特定のモードに
対して設定を追加できます．

例えば org-mode を例にとって見ると，以下のような設定になります．
#+BEGIN_SRC emacs-lisp
(defun guide-key/my-hook-function-for-org-mode ()
  (guide-key/add-local-guide-key-sequence "C-c")
  (guide-key/add-local-guide-key-sequence "C-c C-x")
  (guide-key/add-local-guide-key-sequence "C-c C-v")
  (guide-key/add-local-highlight-command-regexp "org-"))
(add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
#+END_SRC
この設定をした後，org-mode のバッファで C-c C-x p を順番に押して
`org-set-property' が実行される様子がこれです．

[[http://www.kaichan.mydns.jp/~kai/wordpress/wp-content/uploads/2012/11/wpid-guide-key-example-org-anime.gif]]

色付けするコマンドに "org-" を追加しているので，ほとんどのコマンドが色付けさ
れています．これだとあまり意味が無いので，覚えたいコマンド群のみが色付けされ
るような正規表現（例えば "org-clock-" など）に好みで変えてください．

メジャーモードでもマイナーモードでもフックさえあれば同様のことができるので，
お好きなモードで試してみてください．
** 内部動作                                                        :noexport:
#+check
- 要はポーリング．フックはないのかね？
- ウィンドウ操作には popwin
** まとめ
既知の問題点，欠点には以下のようなものがあります．
- guide-key は次に続くキーバインドをすべて表示しようとするので，ポップアップウィ
  ンドウのサイズが大きくなりがちです．もし現在のフレームの大きさよりポップアッ
  プウィンドウの方が大きくなると，正常にポップアップされなくなります．なのでキー
  バインドの多い "C-x" などをポップアップさせるのは，全くの初心者の人以外はあ
  まりお勧めしません．将来的には，ポップアップするコマンドの方を個数や正規表現
  で制限する機能を追加するかもしれません．
- またポップアップされるキーバインドが多すぎると，目視で目的のコマンドを探すこ
  とが難しくなります．ポップアップされるコマンドの個数，あるいは色付けされたコ
  マンドの個数が数個〜十数個ぐらいになるのが理想的かと思います．
- キーバインドをポップアップさせようとした時，一瞬ポップアップされて一瞬で閉じ
  てしまうことがあります．popwin で制御されているウィンドウ（デフォルトだと
  Help バッファや Apropos バッファなど）を閉じた直後に起こることが多いですが，
  他の場面でもたまにあります．そういうときは C-g を連打したり，他のコマンドを
  実行して仕切りなおしてからもう一回プレフィックスキーを入力してみてください．
- one-key ではコマンド名の代わりに，短い説明文字列を表示させることが出来ました．
  これは手動でテンプレートを作っているからこその利点です．guide-key では動的に
  キーバインドからコマンドを抽出してくるので，コマンド名しか表示させることが
  できません．
